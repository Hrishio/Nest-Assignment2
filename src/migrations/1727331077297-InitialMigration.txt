import {
    MigrationInterface,
    QueryRunner,
    Table,
    TableForeignKey,
  } from 'typeorm';
  
  export class NewMigration1726726603493 implements MigrationInterface {
    public async up(queryRunner: QueryRunner): Promise<void> {
      // Create Employee table
      await queryRunner.createTable(
        new Table({
          name: 'employee',
          columns: [
            {
              name: 'empId',
              type: 'int',
              isPrimary: true,
              isGenerated: true,
              generationStrategy: 'increment',
            },
            {
              name: 'firstName',
              type: 'varchar',
            },
            {
              name: 'lastName',
              type: 'varchar',
            },
            {
              name: 'email',
              type: 'varchar',
              isUnique: true,
            },
            {
              name: 'address',
              type: 'varchar',
            },
            {
              name: 'dob',
              type: 'varchar',
            },
            {
              name: 'phoneNumber',
              type: 'varchar',
            },
            {
              name: 'createdAt',
              type: 'timestamp',
              default:  'CURRENT_TIMESTAMP',
            },
            {
              name: 'updatedAt',
              type: 'timestamp',
              default:  'CURRENT_TIMESTAMP',
              onUpdate: 'CURRENT_TIMESTAMP',
            },
            {
              name: 'deletedAt',
              type: 'timestamp',
              isNullable: true,
            },
          ],
        }),
      );
  
      // Create Department table
      await queryRunner.createTable(
        new Table({
          name: 'department',
          columns: [
            {
              name: 'deptID',
              type: 'int',
              isPrimary: true,
              isGenerated: true,
              generationStrategy: 'increment',
            },
            {
              name: 'deptName',
              type: 'varchar',
            },
            {
              name: 'createdAt',
              type: 'timestamp',
              default:  'CURRENT_TIMESTAMP',
            },
            {
              name: 'updatedAt',
              type: 'timestamp',
              default:  'CURRENT_TIMESTAMP',
              onUpdate: 'CURRENT_TIMESTAMP',
            },
            {
              name: 'deletedAt',
              type: 'timestamp',
              isNullable: true,
            },
          ],
        }),
      );
  
      // Create Medicines table
      await queryRunner.createTable(
        new Table({
          name: 'medicines',
          columns: [
            {
              name: 'medId',
              type: 'int',
              isPrimary: true,
              isGenerated: true,
              generationStrategy: 'increment',
            },
            {
              name: 'medName',
              type: 'varchar',
            },
            {
              name: 'dosage',
              type: 'varchar',
            },
            {
              name: 'sideEffects',
              type: 'text',
            },
            {
              name: 'createdAt',
              type: 'timestamp',
              default: 'CURRENT_TIMESTAMP',
            },
            {
              name: 'updatedAt',
              type: 'timestamp',
              default: 'CURRENT_TIMESTAMP',
              onUpdate: 'CURRENT_TIMESTAMP',
            },
            {
              name: 'deletedAt',
              type: 'timestamp',
              isNullable: true,
            },
          ],
        }),
      );
  
      // Create Appointments table
      await queryRunner.createTable(
        new Table({
          name: 'appointments',
          columns: [
            {
              name: 'appId',
              type: 'int',
              isPrimary: true,
              isGenerated: true,
              generationStrategy: 'increment',
            },
            {
              name: 'patientId',
              type: 'int',
            },
            {
              name: 'empId',
              type: 'int',
            },
            {
              name: 'appDate',
              type: 'timestamp',
            },{
                name:'cause',
                type:'text'
            },
            {
              name: 'createdAt',
              type: 'timestamp',
              default:  'CURRENT_TIMESTAMP',
            },
            {
              name: 'updatedAt',
              type: 'timestamp',
              default:  'CURRENT_TIMESTAMP',
              onUpdate: 'CURRENT_TIMESTAMP',
            },
            {
              name: 'deletedAt',
              type: 'timestamp',
              isNullable: true,
            },
          ],
        }),
      );
  
      // Create Patient table
      await queryRunner.createTable(
        new Table({
          name: 'patient',
          columns: [
            {
              name: 'patientId',
              type: 'int',
              isPrimary: true,
              isGenerated: true,
              generationStrategy: 'increment',
            },
            {
              name: 'firstName',
              type: 'varchar',
            },
            {
              name: 'lastName',
              type: 'varchar',
            },
            {
              name: 'email',
              type: 'varchar',
              isUnique: true,
            },
            {
                name:'password',
                type:'varchar',
                isUnique:true
              },
            {
              name: 'address',
              type: 'varchar',
            },
            {
              name: 'dob',
              type: 'varchar',
            },
            {
              name: 'phoneNumber',
              type: 'varchar',
            },
            {
              name: 'empId',
              type: 'int',
              isNullable: true,
            },
            {
              name: 'deptID',
              type: 'int',
              isNullable: true,
            },
            {
              name: 'createdAt',
              type: 'timestamp',
              default:  'CURRENT_TIMESTAMP',
            },
            {
              name: 'updatedAt',
              type: 'timestamp',
              default:  'CURRENT_TIMESTAMP',
              onUpdate: 'CURRENT_TIMESTAMP',
            },
            {
              name: 'deletedAt',
              type: 'timestamp',
              isNullable: true,
            },
            {
              name: 'createdBy',
              type: 'int',
              isNullable: true,
            },
            {
              name: 'updatedBy',
              type: 'int',
              isNullable: true,
            }
          ],
        }),
      );
  
      // Set up Foreign Key for Employee in Patient
      await queryRunner.createForeignKey(
        'patient',
        new TableForeignKey({
          name: 'FK_patient_empId',
          columnNames: ['empId'],
          referencedTableName: 'employee',
          referencedColumnNames: ['empId'],
          onDelete: 'SET NULL',
        }),
      );
  
      // Set up Foreign Key for Department in Patient
      await queryRunner.createForeignKey(
        'patient',
        new TableForeignKey({
          name: 'FK_patient_deptID',
          columnNames: ['deptID'],
          referencedTableName: 'department',
          referencedColumnNames: ['deptID'],
          onDelete: 'SET NULL',
        }),
      );
  
      // Set up Foreign Key for Patient in Appointments
      await queryRunner.createForeignKey(
        'appointments',
        new TableForeignKey({
          name: 'FK_appointments_patientId',
          columnNames: ['patientId'],
          referencedTableName: 'patient',
          referencedColumnNames: ['patientId'],
          onDelete: 'CASCADE',
        }),
      );
  
      // Set up Foreign Key for Employee in Appointments
      await queryRunner.createForeignKey(
        'appointments',
        new TableForeignKey({
          name: 'FK_appointments_empId',
          columnNames: ['empId'],
          referencedTableName: 'employee',
          referencedColumnNames: ['empId'],
          onDelete: 'SET NULL',
        }),
      );
    }
  
    public async down(queryRunner: QueryRunner): Promise<void> {
      // Drop foreign keys in reverse order of creation
      await queryRunner.dropForeignKey('appointments', 'FK_appointments_empId');
      await queryRunner.dropForeignKey('appointments', 'FK_appointments_patientId');
      await queryRunner.dropForeignKey('patient', 'FK_patient_deptID');
      await queryRunner.dropForeignKey('patient', 'FK_patient_empId');
  
      // Drop the tables in reverse order of dependencies
      await queryRunner.dropTable('appointments');
      await queryRunner.dropTable('patient');
      await queryRunner.dropTable('medicines');
      await queryRunner.dropTable('department');
      await queryRunner.dropTable('employee');
    }
  }
  